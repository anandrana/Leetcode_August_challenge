from collections import defaultdict

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: TreeNode) -> List[List[int]]:
        
        min_x = float('inf')
        x_to_reports = defaultdict(list)
        
        def dfs(node, x, y):
            if node is None:
                return
            nonlocal min_x
            dfs(node.left, x-1, y-1)
            dfs(node.right, x+1, y-1)
            x_to_reports[x].append((-y, node.val))
            if x < min_x:
                min_x = x
        dfs(root, 0, 0)
        
        x = min_x
        res = []
        # print(x_to_reports)
        while x in x_to_reports:
            x_to_reports[x].sort()
            # print(x_to_reports[x])
            
            res.append([n[1] for n in x_to_reports[x]])
            x += 1
        return res
            
