# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: ListNode) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        if head is None:
            return 
        
        slow,fast=head,head
        while fast.next and fast.next.next:
            slow=slow.next
            fast=fast.next.next
        
        prev,cur=None,slow.next
        while cur:
            Next=cur.next
            cur.next=prev
            prev=cur
            cur=Next
        
        slow.next=None
        
        head1,head2=head,prev
        while head2:
            Next=head1.next
            head1.next=head2
            head1=head2
            head2=Next
        
        
        # node=head
        # list1=[]
        # while node:
        #     list1.append(node.val)
        #     node=node.next
        # # print(list1)
        # n=len(list1)
        # m=len(list1)//2
        # list2=[]
        # if(n%2==0):
        #     for i in range(m):
        #         list2.append(list1[i])
        #         list2.append(list1[-1-i])
        # else:
        #     for i in range(m+1):
        #         if(i==m):
        #             list2.append(list1[i])
        #         else:
        #             list2.append(list1[i])
        #             list2.append(list1[-1-i])
        # print(list2)
        # head=ListNode(list2[0])
        # c=head
        # for i in list2[1:]:
        #     head.next=ListNode(i)
        #     head=head.next
        
            
        
